#!/usr/bin/env python3
"""
Real Document Creation Tool
Creates actual PowerPoint, Word, and PDF files
"""

import os
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List
from pptx import Presentation
from pptx.util import Inches
from docx import Document
from docx.shared import Inches as DocxInches
from .base_tool import MCPTool

class DocumentCreatorTool(MCPTool):
    """Create real PowerPoint and Word documents"""
    
    def __init__(self):
        super().__init__(
            name="document_creator",
            description="Create real PowerPoint presentations and Word documents"
        )
        self.ppt_output_dir = Path(os.getenv('OUTPUT_DIR_POWERPOINT', './outputs/presentations'))
        self.doc_output_dir = Path(os.getenv('OUTPUT_DIR_DOCUMENTS', './outputs/documents'))
        
        # Create output directories
        self.ppt_output_dir.mkdir(parents=True, exist_ok=True)
        self.doc_output_dir.mkdir(parents=True, exist_ok=True)
    
    async def execute(self, operation: str, **kwargs) -> Dict[str, Any]:
        """Execute document creation operations"""
        try:
            if operation == "create_powerpoint":
                return await self._create_powerpoint(kwargs)
            elif operation == "create_word_doc":
                return await self._create_word_document(kwargs)
            elif operation == "create_meeting_report":
                return await self._create_meeting_report(kwargs)
            else:
                return {"success": False, "error": f"Unknown operation: {operation}"}
                
        except Exception as e:
            error_msg = f"Document creation error: {str(e)}"
            self.log_call(False, error_msg)
            return {"success": False, "error": error_msg}
    
    async def _create_powerpoint(self, data: Dict):
        """Create actual PowerPoint presentation"""
        prs = Presentation()
        
        # Title slide
        title_slide_layout = prs.slide_layouts[0]
        slide = prs.slides.add_slide(title_slide_layout)
        title = slide.shapes.title
        subtitle = slide.placeholders[1]
        
        title.text = data.get('title', 'MCP Generated Presentation')
        subtitle.text = f"Created on {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        
        # Content slides
        content_layout = prs.slide_layouts[1]
        for slide_data in data.get('slides', []):
            slide = prs.slides.add_slide(content_layout)
            title = slide.shapes.title
            content = slide.placeholders[1]
            
            title.text = slide_data.get('title', 'Slide Title')
            
            # Add bullet points
            tf = content.text_frame
            tf.clear()
            for point in slide_data.get('points', []):
                p = tf.add_paragraph()
                p.text = point
                p.level = 0
        
        # Save file
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"{data.get('title', 'presentation').replace(' ', '_')}_{timestamp}.pptx"
        filepath = self.ppt_output_dir / filename
        
        prs.save(str(filepath))
        
        self.log_call(True)
        return {
            "success": True,
            "operation": "create_powerpoint",
            "filepath": str(filepath),
            "filename": filename,
            "slides_created": len(prs.slides),
            "file_size": os.path.getsize(filepath)
        }
    
    async def _create_word_document(self, data: Dict):
        """Create actual Word document"""
        doc = Document()
        
        # Add title
        title = doc.add_heading(data.get('title', 'MCP Generated Document'), 0)
        
        # Add metadata
        doc.add_paragraph(f"Created: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        doc.add_paragraph(f"Generated by: MCP Server Document Creator")
        doc.add_paragraph("")  # Empty line
        
        # Add content sections
        for section in data.get('sections', []):
            doc.add_heading(section.get('heading', 'Section'), level=1)
            
            for paragraph in section.get('content', []):
                doc.add_paragraph(paragraph)
            
            doc.add_paragraph("")  # Empty line between sections
        
        # Save file
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"{data.get('title', 'document').replace(' ', '_')}_{timestamp}.docx"
        filepath = self.doc_output_dir / filename
        
        doc.save(str(filepath))
        
        self.log_call(True)
        return {
            "success": True,
            "operation": "create_word_doc",
            "filepath": str(filepath),
            "filename": filename,
            "sections_created": len(data.get('sections', [])),
            "file_size": os.path.getsize(filepath)
        }
    
    async def _create_meeting_report(self, data: Dict):
        """Create comprehensive meeting report (Word + PowerPoint)"""
        # Create Word report
        word_result = await self._create_word_document({
            'title': f"Meeting Report: {data.get('meeting_title', 'Untitled Meeting')}",
            'sections': [
                {
                    'heading': 'Meeting Overview',
                    'content': [
                        f"Date: {data.get('date', datetime.now().strftime('%Y-%m-%d'))}",
                        f"Attendees: {', '.join(data.get('attendees', []))}",
                        f"Duration: {data.get('duration', 'N/A')}"
                    ]
                },
                {
                    'heading': 'Key Discussion Points',
                    'content': data.get('discussion_points', ['No discussion points recorded'])
                },
                {
                    'heading': 'Decisions Made',
                    'content': data.get('decisions', ['No decisions recorded'])
                },
                {
                    'heading': 'Action Items',
                    'content': data.get('action_items', ['No action items recorded'])
                }
            ]
        })
        
        # Create PowerPoint summary
        ppt_result = await self._create_powerpoint({
            'title': f"Meeting Summary: {data.get('meeting_title', 'Untitled Meeting')}",
            'slides': [
                {
                    'title': 'Meeting Overview',
                    'points': [
                        f"Date: {data.get('date', datetime.now().strftime('%Y-%m-%d'))}",
                        f"Attendees: {len(data.get('attendees', []))} people",
                        f"Key Topics: {len(data.get('discussion_points', []))} items discussed"
                    ]
                },
                {
                    'title': 'Key Decisions',
                    'points': data.get('decisions', ['No decisions made'])[:5]  # Top 5
                },
                {
                    'title': 'Action Items',
                    'points': data.get('action_items', ['No action items'])[:5]  # Top 5
                }
            ]
        })
        
        return {
            "success": True,
            "operation": "create_meeting_report",
            "word_document": word_result,
            "powerpoint": ppt_result,
            "files_created": 2
        }

    def get_schema(self) -> Dict[str, Any]:
            return {
                "type": "function",
                "function": {
                    "name": self.name,
                    "description": self.description,
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "operation": {
                                "type": "string",
                                "enum": ["create_powerpoint", "create_word_doc", "create_meeting_report"],
                                "description": "Document creation operation to perform"
                            },
                            "title": {
                                "type": "string",
                                "description": "Document title"
                            },
                            "slides": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "title": {"type": "string"},
                                        "points": {
                                            "type": "array",
                                            "items": {"type": "string"}
                                        }
                                    }
                                },
                                "description": "Slides for PowerPoint (for create_powerpoint)"
                            },
                            "sections": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "heading": {"type": "string"},
                                        "content": {
                                            "type": "array",
                                            "items": {"type": "string"}
                                        }
                                    }
                                },
                                "description": "Sections for Word document (for create_word_doc)"
                            },
                            "meeting_title": {
                                "type": "string",
                                "description": "Meeting title (for create_meeting_report)"
                            },
                            "date": {
                                "type": "string",
                                "description": "Meeting date (for create_meeting_report)"
                            },
                            "attendees": {
                                "type": "array",
                                "items": {"type": "string"},
                                "description": "Meeting attendees (for create_meeting_report)"
                            },
                            "discussion_points": {
                                "type": "array",
                                "items": {"type": "string"},
                                "description": "Discussion points (for create_meeting_report)"
                            },
                            "decisions": {
                                "type": "array",
                                "items": {"type": "string"},
                                "description": "Decisions made (for create_meeting_report)"
                            },
                            "action_items": {
                                "type": "array",
                                "items": {"type": "string"},
                                "description": "Action items (for create_meeting_report)"
                            }
                        },
                        "required": ["operation"]
                    }
                }
            }

def register_tools(server):
    """Register DocumentCreatorTool with the MCP server."""
    doc_tool = DocumentCreatorTool()

    @server.tool(name=doc_tool.name)
    async def document_creator(operation: str, **kwargs):
        """Create documents (delegates to DocumentCreatorTool)."""
        return await doc_tool.execute(operation=operation, **kwargs)